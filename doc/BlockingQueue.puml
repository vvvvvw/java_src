@startuml

interface Queue extends Collection {

    boolean add(E e);

    boolean offer(E e);

    E remove();

    E poll();

    E element();

    E peek();
}

interface BlockingQueue extends Queue {

    boolean add(E e);

    boolean offer(E e);

    void put(E e) throws InterruptedException;

    boolean offer(E e, long timeout, TimeUnit unit)
        throws InterruptedException;

    E take() throws InterruptedException;

    E poll(long timeout, TimeUnit unit)
        throws InterruptedException;

    int remainingCapacity();

    boolean remove(Object o);

    public boolean contains(Object o);

    int drainTo(Collection<? super E> c);

    int drainTo(Collection<? super E> c, int maxElements);
}

class ArrayListBlockingQueue implements BlockingQueue{
}

class SynchronousQueue implements BlockingQueue{
}

class BlockingDeque implements BlockingQueue{
}

interface DelayQueue extends BlockingQueue{
}

class LinkedBlockingDeque implements DelayQueue{
}


class DelayQueue implements BlockingQueue{
}

interface TransferQueue implements BlockingQueue{
}

class LinkedTransferQueue implements TransferQueue{
}

class LinkedBlockingQueue implements BlockingQueue{
}
class PriorityBlockingQueue implements BlockingQueue{
}



@enduml